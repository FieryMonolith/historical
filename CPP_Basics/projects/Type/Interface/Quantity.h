/*

 * Copyright 2006 Jason Stredwick.

 * Distributed under the Boost Software License, Version 1.0. (See
 * LICENSE information at the bottom of this file or the copy at
 * http://www.boost.org/LICENSE_1_0.txt)

 */

#ifndef __Type_Interface_Quantity_h__
#define __Type_Interface_Quantity_h__

/*

 * The Quantity class is meant to provide a class wrapper around builtin
 *   types without overhead storage-wise or performance-wise.  To maintain
 *   storage equivalence with a builtin type, this class is not virtual and
 *   is not meant to be inherited because that would artifically increase
 *   the footprint of this class with a vtable.  This class is also meant
 *   to perform all the operations that are performed on builtin types in
 *   the same fashion.  Thus there is no error checking such as type 
 *   conversion.  However, it should still allow the compiler to
 *   to generate warnings given the correct warning level is provided.  To
 *   accomplish this task, the constructors are templatized in order to 
 *   facilitate static casting of types to the type of the class.  This 
 *   allows the construction of a class whether through a parameterized
 *   constructor method or assignment will auto convert all builtin types
 *   and other Quantity types.  To facilitate seemless functionality the
 *   cast operators are used, which allow global builtin type operators 
 *   such as plus to work without having to explicitly overload that
 *   operator.  However, the cast operator that returns a pointer is not
 *   available and is not defined and is private.

 * Jason Stredwick March 31, 2006 Finalized first version of Quantity class

 */

namespace nType
{

  template <typename T>
  class Quantity {
  public:
    /*** Constructors ******************************************************/
    Quantity(void) : d_data(0)                                   { return; }
    Quantity(const T &t) : d_data(t)                             { return; }
    template <typename U>
    Quantity(const U &u) : d_data(static_cast<T>(u))             { return; }
    Quantity(const Quantity<T> &q) : d_data(q.d_data)            { return; }
    template <typename U>
    Quantity(const Quantity<U> &q) : d_data(static_cast<T>(q())) { return; }

    /*** Destructor ********************************************************/
    ~Quantity(void) { return; }

    /*** Assignment ********************************************************/
    // Don't need assignment to type T or U because the other assignment
    //   operators will auto create a Quantity of the appropriate type
    //   including static_cast.
    const Quantity<T> &operator=(const Quantity<T> &q)
    {
      if(&q != this) { d_data = q.d_data; }
      return *this;
    }

    template <typename U>
    const Quantity<T> &operator=(const Quantity<U> &q)
    {
      d_data = static_cast<T>(q());
      return *this;
    }

    //*** Accessors/Modifyiers *********************************************/
    const T  Value(void) const { return d_data; }
          T &Value(void)       { return d_data; }

    const T  operator()(void) const { return d_data; }
          T &operator()(void)       { return d_data; }

    /*** Cast Operators ****************************************************/
    operator const T &() const { return d_data; }
    operator       T &()       { return d_data; }

  private:
    T d_data;
  };

} // end namespace nType

#endif // __Type_Interface_Quantity_h__

/*

 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.

 */
