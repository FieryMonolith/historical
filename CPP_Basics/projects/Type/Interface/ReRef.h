/*

 * Copyright 2006 Jason Stredwick.

 * Distributed under the Boost Software License, Version 1.0. (See
 * LICENSE information at the bottom of this file or the copy at
 * http://www.boost.org/LICENSE_1_0.txt)

 */

#ifndef __Type_Interface_ReRef_h__
#define __Type_Interface_ReRef_h__

/*

 * The ReRef class is based on the Ref class.  Ref is intended to be the
 *   equivalent to a reference and transparent to the user.  It must be
 *   initialized with a reference, Ref, or ReRef.  Assignment changes
 *   the value of its data not what it is pointing to.  The casting
 *   operators allow for seemless use of this class with global operators.
 * The ReRef class is exactly the same as the Ref class but includes one
 *   additional feature, the ability to change what the reference points
 *   to.  The Reassign method is just like the constructors, it takes only
 *   a variable reference, a Ref, or a ReRef.
 * Note that the cast operator may give a warning on older compilers.
 *   This class was verified on g++4 and visual studio 2005.

 * Jason Stredwick May 5, 2006
 *   Realized I needed a way to get a pointer of the Ref<T> variable, so
 *   I created the Address method.

 * Jason Stredwick May 5, 2006
 *   Figured out how I wanted to handle ReRef<const T> and const ReRef<T>.
 *     Const references are done ther with const ReRef<T>,
 *     const ReRef<const T>, or ReRef<const T>.
 *   Added a const version of operator&.
 *   Removed test for self in operator=, which is not necessary.

 * Jason Stredwick April 18, 2006 Modified ReRef to inherit Ref in order
 *   to handle the implicit construction of one with the other.

 * Jason Stredwick April 6, 2006 Finalized first version of Ref and ReRef.

 */

#include "Type/Interface/Ref.h"

namespace nType
{

  template <typename T>
  class ReRef : public Ref<T>
  {
  private:
    // No default constructor
    ReRef(void);

  public:
    ReRef(T &t)              : Ref<T>(t) { return; }
    ReRef(const Ref<T> &r)   : Ref<T>(r) { return; }
    ReRef(const ReRef<T> &r) : Ref<T>(r) { return; }

    ~ReRef(void) { return; }

    // Assignment operators
    T &operator=(const ReRef<T> &r)
    {
      *Ref<T>::d_t = *(r.Ref<T>::d_t);
      return *Ref<T>::d_t;
    }

    T &operator=(const Ref<T> &r)
    {
      *Ref<T>::d_t = *(r.Ref<T>::d_t);
      return *Ref<T>::d_t;
    }

    T &operator=(const T &t)
    {
      *Ref<T>::d_t = t;
      return *Ref<T>::d_t;
    }

    // Address operator
    const T * operator&() const { return Ref<T>::d_t; }
          T * operator&()       { return Ref<T>::d_t; }

    // Cast operators
    // Allows for seemless use with global operators, though
    //   prior to g++3.3, may give warning
    operator const T &() const { return *Ref<T>::d_t; }
    operator       T &()       { return *Ref<T>::d_t; }

    const ReRef<T> *Address(void) const { return this; }
          ReRef<T> *Address(void)       { return this; }

    void Reassign(T &t)              { Ref<T>::d_t = &t;    return; }
    void Reassign(const Ref<T> &r)   { Ref<T>::d_t = r.d_t; return; }
    void Reassign(const ReRef<T> &r) { Ref<T>::d_t = r.d_t; return; }
  };

} // end namespace nType

#endif // __Type_Interface_ReRef_h__

/*

 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.

 */
