/*

 * Copyright 2006 Jason Stredwick.

 * Distributed under the Boost Software License, Version 1.0. (See
 * LICENSE information at the bottom of this file or the copy at
 * http://www.boost.org/LICENSE_1_0.txt)

 */

#ifndef __Ref_h__
#define __Ref_h__

/*

 * Ref is intended to be the equivalent to a reference and transparent to
 *   the user.  It must be initialized with a reference or another Ref.
 *   Assignment changes the value of its data not what it is pointing to.
 *   The casting operators allow for seemless use of this class with global
 *   operators.
 * Note that the cast operator may give a warning on older compilers.
 *   This class was verified on g++4 and visual studio 2005.

 * Jason Stredwick May 7, 2006
 *   Added typedef T type as public member.  Also, realized and tested that
 *   boost::addressof works for determining the address of Ref too, not just
 *   the member method.  However, unless one is using the older MSVC
 *   the include hierarchy can be removed completely.

 * Jason Stredwick May 5, 2006
 *   Realized I needed a way to get a pointer of the Ref<T> variable, so
 *   I created the Address method.

 * Jason Stredwick May 5, 2006
 *   Figured out how I wanted to handle Ref<const T> and const Ref<T>.
 *     Const references are done ther with const Ref<T>,
 *     const Ref<const T>, or Ref<const T>.
 *   Added a const version of operator&.
 *   Removed test for self in operator=, which is not necessary.

 * Jason Stredwick April 6, 2006 Finalized first version of Ref.

 */

template <typename T>
class Ref
{
protected:
  T *d_t;

public:
  typedef T type;

private:
  // No default construction
  Ref(void);

public:
  Ref(T &t)            : d_t(&t)    { return; }
  Ref(const Ref<T> &r) : d_t(r.d_t) { return; }

  ~Ref(void) { d_t = 0; return; }

  // Assignment operators
  T &operator=(const Ref<T> &r) {
    *d_t = *(r.d_t);
    return *d_t;
  }

  T &operator=(const T &t) { *d_t = t; return *d_t; }

  // Address operator
  const T * operator&() const { return d_t; }
        T * operator&()       { return d_t; }

  // Cast operators
  // Allows for seemless use with global operators, though
  //   prior to g++3.3, may give warning
  operator const T &() const { return *d_t; }
  operator       T &()       { return *d_t; }

  const Ref<T> *Address(void) const { return this; }
        Ref<T> *Address(void)       { return this; }
};

#endif

/*

 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.

 */
